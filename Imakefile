DEPEND = sh ./depend.sh

# just delete or comment these four lines if you wish to use gnu
# compiler suite

CC = clang
AS = llvm-as
AR = llvm-ar clq
RANLIB = llvm-ranlib
LD = llvm-link
CXX = clang++

# Perform make OPTIONS="-Ofast -DNDEBUG -D_REENTRANT -D__extern_always_inline=\"extern __always_inline\"" libAleph.a if you want
# to generate optimized libAleph.a. If you use clang compiler, then you
# may be intested in to use -O4; in this case, be sure that llvm be
# installed with gold linker and the gold plugin. Be careful with some
# gsl parts and the -Ofast option in clang; they do not compile!
#
# In Aleph-w clang generated code is between 5-10% faster than gcc

HLIST=	tpl_dynSetTree.H tpl_arrayHeap.H tpl_binHeap.H tpl_netcost.H	\
	tpl_dynBinHeap.H generate_tree.H generate_graph.H tpl_tree_node.H \
	point.H tpl_treapRk.H Set.H Map.H array_it.H al-domain.H \
	Multiset.H Multimap.H List.H Vector.H ahAlgo.H Stack.H 	\
	Queue.H tpl_odhash.H tpl_nodePool.H random_graph.H Priority_Queue.H \
	tpl_olhash.H tpl_dynSetHash.H ahSort.H ahSearch.H\
	tpl_random_queue.H tpl_net_sup_dem.H tpl_bipartite.H graph-traverse.H \
	tpl_dynarray_set.H tpl_kgraph.H tpl_dynMat.H	\
	ahMem.H ahAssert.H ahDefs.H aleph.H euclidian-graph-common.H 	\
	tpl_linearHash.H signal.H ahUtils.H ran_array.h tpl_dynDlist.H \
	tpl_skipList.H tpl_tdRbTree.H tpl_splay_tree.H \
	tpl_dynTreap.H tpl_union.H tpl_binNode.H tpl_splay_treeRk.H\
	useMutex.H protected_cache.H socket_wrappers.H tpl_dynListStack.H \
	tpl_autoPtr.H trace.H tpl_cache.H format.H random_net.H \
	protected_lhash.H protected_odhash.H log.H useCondVar.H \
	tpl_dynListQueue.H al-vector.H ahSingleton.H comb.H \
	treepic_utils.H driven_table.H pointer_table.H Karger.H al-matrix.H \
	timeoutQueue.H parse_utils.H ah_stdc++_utils.H eulerian.H \
	hamiltonian.H ahTypes.H tpl_arrayStack.H  tpl_arrayQueue.H \
	tpl_graph.H mat_path.H tpl_slist_modified.H ahFunction.H ahPair.H \
	ahIterator.H  grid.H tpl_path_utils.H mat_latex.H tpl_sort_utils.H \
	polygon.H generate_df_tree.H generate_spanning_tree_picture.H \
	archeap.H filter_iterator.H kosaraju.H htlist.H tpl_sgraph.H\
	tpl_indexNode.H tpl_indexArc.H tpl_indexGraph.H io_graph.H \
	tpl_slist.H tpl_snode.H tpl_lhash.H tpl_dynLhash.H \
	tpl_odhash.H tpl_memArray.H tpl_dynArray.H ahFuntional.H hash-dry.H\
	bloom-filter.H ah-dry.H graph-dry.H tpl_con_queue.H	\
	q-consumer-threads.H ah-string-utils.H ah-comb.H geom_algorithms.H

HXX=	$(HLIST:.H=.hxx)

LIBCCCSRCS=	ahAssert.C primes.C ahDefs.C  useMutex.C ahDaemonize.C	\
		socket_wrappers.C parse_utils.C timeoutQueue.C uid.C	\
		gmpfrxx.C eepicgeom.C point.C treepic_utils.C \
		euclidian-graph-common.C ahUtils.C tpl_sort_utils.C	\
		hash-fct.C hash-dry.C aleph-graph.C tpl_sort_utils.C \
		geom_algorithms.C ahNow.C

LIBCSRCS=	ran_array.c mpfr_mul_d.c

SRCLIST=	 $(HLIST) $(TESTSRCS) $(LIBSRCS)

SRCS= 	$(LIBCSRCS) $(LIBCCCSRCS)

BASIC_OBJS= 	$(LIBCCCSRCS:.C=.o) $(LIBCSRCS:.c=.o)

INCLUDES =      -I./

MSG=-DMESSAGES

WARN=	-Wall -Wextra -Wcast-align -Wno-sign-compare -Wno-write-strings -Wno-parentheses

FLAGS=-DNDEBUG -Ofast -fPIE -D_REENTRANT -D__extern_always_inline="extern __always_inline" -fpic

DEFINES=	-D_GLIBCXX__PTHREADS

OPTIONS=	$(FLAGS) $(MSG) $(WARN) $(DEFINES)

CXXFLAGS=	 -std=c++20 $(INCLUDES) $(OPTIONS)

NormalLibraryObjectRule()

NormalLibraryTarget(Aleph,$(BASIC_OBJS))
InstallLibrary(Aleph,./)

DependTarget()


